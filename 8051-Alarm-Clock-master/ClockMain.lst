0000              1   ; ISR_example.asm: a) Increments/decrements a BCD variable every half second using
0000              2   ; an ISR for timer 2; b) Generates a 2kHz square wave at pin P3.7 using
0000              3   ; an ISR for timer 0; and c) in the 'main' loop it displays the variable
0000              4   ; incremented/decremented using the ISR for timer 2 on the LCD.  Also resets it to 
0000              5   ; zero if the 'BOOT' pushbutton connected to P4.5 is pressed.
                  7   $LIST
0000              9   
0000             10   ; There is a couple of typos in MODLP51 in the definition of the timer 0/1 reload
0000             11   ; special function registers (SFRs), so:
0000             12   
0000             13   TIMER0_RELOAD_L DATA 0xf2
0000             14   TIMER1_RELOAD_L DATA 0xf3
0000             15   TIMER0_RELOAD_H DATA 0xf4
0000             16   TIMER1_RELOAD_H DATA 0xf5
0000             17   
0000             18   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
0000             19   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             20   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             21   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             22   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             23   
0000             24   BOOT_BUTTON   equ P4.5
0000             25   SOUND_OUT     equ P3.7
0000             26   BUTTON0       equ P0.0
0000             27   BUTTON1       equ P0.1
0000             28   BUTTON2       equ P0.2
0000             29   BUTTON3       equ P0.3
0000             30   BUTTON4       equ P0.4
0000             31   BUTTON5       equ P0.5
0000             32   BUTTON6       equ P0.6
0000             33   
0000             34   ; Reset vector
0000             35   org 0x0000
0000 020225      36       ljmp main
0003             37   
0003             38   ; External interrupt 0 vector (not used in this code)
0003             39   org 0x0003
0003 32          40            reti
0004             41   
0004             42   ; Timer/Counter 0 overflow interrupt vector
000B             43   org 0x000B
000B 020154      44            ljmp Timer0_ISR
000E             45   
000E             46   ; External interrupt 1 vector (not used in this code)
0013             47   org 0x0013
0013 32          48            reti
0014             49   
0014             50   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             51   org 0x001B
001B 32          52            reti
001C             53   
001C             54   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             55   org 0x0023 
0023 32          56            reti
0024             57            
0024             58   ; Timer/Counter 2 overflow interrupt vector
002B             59   org 0x002B
002B 020170      60            ljmp Timer2_ISR
002E             61   
002E             62   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             63   dseg at 0x30
0030             64   Count1ms:     ds 2 ; Used to determine when half second has passed
0032             65   BCD_counter:  ds 1 ; The BCD counter incrememted in the ISR and displayed in the main loop
0033             66   BCD_counter2: ds 1 ;
0034             67   BCD_counter3: ds 1 ;
0035             68   Hour:         ds 1 ;
0036             69   Hour2:        ds 1 ;
0037             70   Hour3:        ds 1 ;
0038             71   Minute:       ds 1 ;
0039             72   Minute2:      ds 1 ;
003A             73   Minute3:      ds 1 ;
003B             74   Second:       ds 1 ;
003C             75   Second2:      ds 1 ;
003D             76   Second3:      ds 1 ;
003E             77   Half_Day:     ds 1 ;
003F             78   Day:          ds 1 ;
0040             79   Day2:         ds 1 ;
0041             80   Day3:         ds 1 ;
0042             81   Mode_sel:     ds 1 ;
0043             82   
0043             83   ; In the 8051 we have variables that are 1-bit in size.  We can use the setb, clr, jb, and jnb
0043             84   ; instructions with these variables.  This is how you define a 1-bit variable:
0000             85   bseg
0000             86   seconds_flag:      dbit 1 ; Set to one in the ISR every time 1000 ms had passed 
0001             87   AM_flag:           dbit 1 ;
0002             88   AM_flag2:          dbit 1 ;
0003             89   AM_flag3:          dbit 1 ;
0004             90   Alarm_flag:        dbit 1 ;
0005             91   Clock_pause:       dbit 1 ;
0006             92   
002E             93   cseg
002E             94   ; These 'equ' must match the wiring between the microcontroller and the LCD!
002E             95   LCD_RS equ P1.2
002E             96   LCD_RW equ P1.3
002E             97   LCD_E  equ P1.4
002E             98   LCD_D4 equ P3.2
002E             99   LCD_D5 equ P3.3
002E            100   LCD_D6 equ P3.4
002E            101   LCD_D7 equ P3.5
                103   	$LIST
00DA            105   
00DA            106   ;                     1234567890123456    <- This helps determine the location of the counter
00DA 78783A78   107   Initial_Message:  db 'xx:xx:xx xM, xxx', 0
     783A7878
     20784D2C
     20787878
     00
00EB 4D6F6465   108   Clock_Message:    db 'Mode: Clock     '
     3A20436C
     6F636B20
     20202020
00FB 4D6F6465   109   Alarm1_Message:   db 'Mode: Alarm Wday ', 0
     3A20416C
     61726D20
     57646179
     2000
010D 4D6F6465   110   Alarm2_Message:   db 'Mode: Alarm Wknd ', 0
     3A20416C
     61726D20
     576B6E64
     2000
011F 4D6F6E00   111   Monday:           db 'Mon', 0
0123 54756500   112   Tuesday:          db 'Tue', 0
0127 57656400   113   Wednesday:        db 'Wed', 0
012B 54687500   114   Thursday:         db 'Thu', 0
012F 46726900   115   Friday:           db 'Fri', 0
0133 53617400   116   Saturday:         db 'Sat', 0
0137 53756E00   117   Sunday:           db 'Sun', 0
013B            118    
013B            119   ;---------------------------------;
013B            120   ; Routine to initialize the ISR   ;
013B            121   ; for timer 0                     ;
013B            122   ;---------------------------------;
013B            123   Timer0_Init:
013B E589       124            mov a, TMOD
013D 54F0       125            anl a, #0xf0 ; Clear the bits for timer 0
013F 4401       126            orl a, #0x01 ; Configure timer 0 as 16-timer
0141 F589       127            mov TMOD, a
0143 758CEA     128            mov TH0, #high(TIMER0_RELOAD)
0146 758AE8     129            mov TL0, #low(TIMER0_RELOAD)
0149            130            ; Set autoreload value
0149 75F4EA     131            mov TIMER0_RELOAD_H, #high(TIMER0_RELOAD)
014C 75F2E8     132            mov TIMER0_RELOAD_L, #low(TIMER0_RELOAD)
014F            133            ; Enable the timer and interrupts
014F C2A9       134       clr ET0  ; Enable timer 0 interrupt
0151 D28C       135       setb TR0  ; Start timer 0
0153 22         136            ret
0154            137   
0154            138   ;---------------------------------;
0154            139   ; ISR for timer 0.  Set to execute;
0154            140   ; every 1/4096Hz to generate a    ;
0154            141   ; 2048 Hz square wave at pin P3.7 ;
0154            142   ;---------------------------------;
0154            143   Timer0_ISR:
0154 B2B7       144            cpl SOUND_OUT ; Connect speaker to P3.7!
0156 32         145            reti
0157            146   
0157            147   ;---------------------------------;
0157            148   ; Routine to initialize the ISR   ;
0157            149   ; for timer 2                     ;
0157            150   ;---------------------------------;
0157            151   Timer2_Init:
0157 75C800     152            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
015A 75CDA9     153            mov TH2, #high(TIMER2_RELOAD)
015D 75CC9A     154            mov TL2, #low(TIMER2_RELOAD)
0160            155            ; Set the reload value
0160 75CBA9     156            mov RCAP2H, #high(TIMER2_RELOAD)
0163 75CA9A     157            mov RCAP2L, #low(TIMER2_RELOAD)
0166            158            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0166 E4         159            clr a
0167 F530       160            mov Count1ms+0, a
0169 F531       161            mov Count1ms+1, a
016B            162            ; Enable the timer and interrupts
016B D2AD       163       setb ET2  ; Enable timer 2 interrupt
016D D2CA       164       setb TR2  ; Enable timer 2
016F 22         165            ret
0170            166   
0170            167   ;---------------------------------;
0170            168   ; ISR for timer 2                 ;
0170            169   ;---------------------------------;
0170            170   Timer2_ISR:
0170 C2CF       171            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0172 B2B6       172            cpl P3.6 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0174            173            
0174            174            ; The two registers used in the ISR must be saved in the stack
0174 C0E0       175            push acc
0176 C0D0       176            push psw
0178            177            
0178            178            ; Increment the 16-bit one mili second counter
0178 0530       179            inc Count1ms+0    ; Increment the low 8-bits first
017A E530       180            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
017C 7002       181            jnz Inc_Done
017E 0531       182            inc Count1ms+1
0180            183   
0180            184   Inc_Done:
0180            185            ; Check if half second has passed
0180 E530       186            mov a, Count1ms+0
0182 B4E807     187            cjne a, #low(1000), offset10 ; Warning: this instruction changes the carry flag!
0185 E531       188            mov a, Count1ms+1
0187 B40302     189            cjne a, #high(1000), offset10
018A 8003       190            sjmp millisecond_cnt
018C            191   
018C            192   offset10:
018C 02021E     193            ljmp Timer2_ISR_done
018F            194   
018F            195   millisecond_cnt:
018F            196            ; 1000 milliseconds have passed.  Set a flag so the main program knows
018F D200       197            setb seconds_flag ; Let the main program know 1 second had passed
0191 B28C       198            cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
0193            199            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
0193 E4         200            clr a
0194 F530       201            mov Count1ms+0, a
0196 F531       202            mov Count1ms+1, a
0198            203            
0198            204   check_Alarm:
0198 E53F       205            mov a, Day
019A B40715     206            cjne a, #0x07, Weekday_Alarm
019D B40612     207            cjne a, #0x06, Weekday_Alarm
01A0 E535       208            mov a, Hour
01A2 B53722     209            cjne a, Hour3, Main_counter
01A5 E538       210            mov a, Minute
01A7 B53A1D     211            cjne a, Minute3, Main_counter
01AA E501       212            mov a, AM_flag
01AC B50318     213            cjne a, AM_flag3, Main_counter
01AF 0201C4     214            ljmp Alarm_on
01B2            215            
01B2            216   Weekday_Alarm:
01B2 E535       217            mov a, Hour
01B4 B53610     218            cjne a, Hour2, Main_counter
01B7 E538       219            mov a, Minute
01B9 B5390B     220            cjne a, Minute2, Main_counter
01BC E501       221            mov a, AM_flag
01BE B50206     222            cjne a, AM_flag2, Main_counter
01C1 0201C4     223            ljmp Alarm_on
01C4            224            
01C4            225   Alarm_on:
01C4 E4         226            clr a
01C5 D2A9       227            setb ET0 
01C7            228            
01C7            229   Main_counter:    
01C7            230            ; Increment the BCD counter
01C7 E532       231            mov a, BCD_counter
01C9 B4594A     232            cjne a, #0x59, Increment_Sec ; Checks if 60 seconds has passed 
01CC 7400       233            mov a, #0x00
01CE F532       234            mov BCD_counter, a
01D0            235            
01D0 E4         236            clr a
01D1 E538       237            mov a, Minute 
01D3 2401       238            add a, #0x01 ; Increments 1 minute if 60 seconds passed
01D5 D4         239            da a
01D6 F538       240            mov Minute, a  
01D8            241            
01D8 E4         242            clr a
01D9 E538       243            mov a, Minute
01DB B46040     244       cjne a, #0x60, Not_increment ; Checks if 60 minutes has passed
01DE 7400       245            mov a, #0x00
01E0 F538       246            mov Minute, a
01E2            247            
01E2 E4         248            clr a
01E3 E535       249            mov a, Hour 
01E5 2401       250            add a, #0x01 ; Increments 1 hour if 60 seconds passed
01E7 D4         251            da a
01E8 F535       252            mov Hour, a
01EA            253   
01EA E4         254            clr a
01EB E535       255            mov a, Hour 
01ED B41304     256            cjne a, #0x13, Hour_increment ; Checks if 12 hours has passed
01F0 7401       257            mov a, #0x01 ;----
01F2 F535       258            mov Hour, a ;-----
01F4            259            
01F4            260   Hour_increment:
01F4 E4         261            clr a
01F5 E535       262            mov a, Hour 
01F7 B41224     263            cjne a, #0x12, Not_increment ; Checks if 12 hours has passed
01FA 7401       264            mov a, #0x01 ;----
01FC B201       265            cpl AM_Flag ;'nots' the AM_Flag if 12
01FE 200102     266            jb AM_Flag, Day_increment
0201 801B       267            sjmp Not_increment
0203            268            
0203            269   Day_increment:   
0203 E4         270            clr a
0204 E53F       271            mov a, Day
0206 2401       272            add a, #0x01 ; Increments 1 full-day if AM->PM
0208 D4         273            da a
0209 F53F       274            mov Day, a
020B            275            
020B E4         276            clr a
020C E53F       277            mov a, Day
020E B4080D     278            cjne a, #0x08, Not_increment ; Checks if 7 days have passed 
0211 7401       279            mov a, #0x01
0213 F53F       280            mov Day, a
0215            281            
0215 E4         282            clr a   
0216            283            
0216            284   Increment_Sec:
0216 E532       285            mov a, BCD_counter
0218 2401       286            add a, #0x01
021A D4         287            da a
021B F532       288            mov BCD_counter, a
021D E4         289            clr a
021E            290            
021E            291   Not_increment:
021E            292            
021E            293   Timer2_ISR_done:
021E D0D0       294            pop psw
0220 D0E0       295            pop acc
0222 32         296            reti
0223            297            
0223            298   Timer2_ISR_decrement:
0223 2499       299            add a, #0x99 ; Adding the 10-complement of -1 is like subtracting 1.
0225            300   
0225            301   ;---------------------------------;
0225            302   ; Main program. Includes hardware ;
0225            303   ; initialization and 'forever'    ;
0225            304   ; loop.                           ;
0225            305   ;---------------------------------;
0225            306   main:
0225            307            ; Initialization
0225 75817F     308       mov SP, #0x7F
0228 12013B     309       lcall Timer0_Init
022B 120157     310       lcall Timer2_Init
022E            311       ; In case you decide to use the pins of P0, configure the port in bidirectional mode:
022E 75E600     312       mov P0M0, #0
0231 75E700     313       mov P0M1, #0
0234 D2AF       314       setb EA   ; Enable Global interrupts
0236 120088     315       lcall LCD_4BIT
0239            316       ; For convenience a few handy macros are included in 'LCD_4bit.inc':
0239 C0E0       317            push acc
023B 7401       317            mov a, #1
023D 14         317            dec a
023E 1200BF     317            lcall ?Set_Cursor_1 ; Select column and row
0241 D0E0       317            pop acc
0243 C083       318            push dph
0245 C082       318            push dpl
0247 C0E0       318            push acc
0249 9000DA     318            mov dptr, #Initial_Message
024C 1200B2     318            lcall ?Send_Constant_String
024F D0E0       318            pop acc
0251 D082       318            pop dpl
0253 D083       318            pop dph
0255            319            
0255 D200       320       setb seconds_flag
0257 C201       321       clr  AM_flag
0259            322            
0259 753250     323            mov BCD_counter,  #0x50
025C 753300     324            mov BCD_counter2, #0x00
025F 753400     325            mov BCD_counter3, #0x00
0262 753511     326       mov Hour,         #0x11
0265 753601     327       mov Hour2,        #0x01
0268 753701     328       mov Hour3,        #0x01
026B 753859     329       mov Minute,       #0x59
026E 753901     330       mov Minute2,      #0x01
0271 753A01     331       mov Minute3,      #0x01
0274 753F01     332       mov Day,          #0x01
0277 754001     333       mov Day2,         #0x01
027A 754106     334       mov Day3,         #0x06
027D 754201     335       mov Mode_sel,     #0x01 
0280            336            
0280            337            ; After initialization the program stays in this 'forever' loop
0280            338            
0280            339   loop:
0280 20C519     340            jb BOOT_BUTTON, offset1      ; if the 'BOOT' button is not pressed skip
0283 C002       341            push AR2
0285 7A32       341            mov R2, #50
0287 120039     341            lcall ?Wait_Milli_Seconds
028A D002       341            pop AR2               ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
028C 20C50D     342            jb BOOT_BUTTON, offset1      ; if the 'BOOT' button is not pressed skip
028F 30C5FD     343            jnb BOOT_BUTTON, $                    ; Wait for button release.  The '$' means: jump to same instruction.
0292            344            
0292 B205       345            cpl Clock_pause
0294 200508     346            jb Clock_pause, pause
0297 D2CA       347            setb TR2                      ; Stop timer 2
0299 02029C     348            ljmp offset1
029C            349            
029C            350   offset1:
029C 0202A4     351            ljmp mode_set;
029F            352            
029F            353   pause: 
029F C2CA       354            clr TR2
02A1 0202A4     355            ljmp mode_set;
02A4            356   
02A4            357   mode_set:
02A4 208324     358            jb BUTTON3, offset2
02A7 C002       359            push AR2
02A9 7A32       359            mov R2, #50
02AB 120039     359            lcall ?Wait_Milli_Seconds
02AE D002       359            pop AR2
02B0 208318     360            jb BUTTON3, offset2
02B3 3083FD     361            jnb BUTTON3, $                    ; Wait for button release.  The '$' means: jump to same instruction.
02B6 E4         362            clr a
02B7 E542       363            mov a, Mode_sel
02B9 2401       364            add a, #0x01
02BB D4         365            da a 
02BC B40407     366            cjne a, #0x04, Mode_sel_reset
02BF 7401       367            mov a, #0x01
02C1 F542       368            mov Mode_sel, a
02C3 E4         369            clr a
02C4 8005       370            sjmp offset2
02C6            371   Mode_sel_reset:
02C6 F542       372            mov Mode_sel, a
02C8 E4         373            clr a
02C9 8000       374            sjmp offset2
02CB            375   offset2:
02CB E542       376            mov a, Mode_sel
02CD B40104     377            cjne a, #0x01, offset3
02D0 E4         378            clr a
02D1 0202E2     379            ljmp hour_set
02D4            380   offset3:
02D4 B40204     381            cjne a, #0x02, offset4
02D7 E4         382            clr a
02D8 02039A     383            ljmp Mode2_hour_set
02DB            384   offset4:
02DB B403A2     385            cjne a, #0x03, loop
02DE E4         386            clr a
02DF 020452     387            ljmp Mode3_hour_set
02E2            388   
02E2            389   hour_set:
02E2 208024     390            jb BUTTON0, minute_set
02E5 C002       391            push AR2
02E7 7A32       391            mov R2, #50
02E9 120039     391            lcall ?Wait_Milli_Seconds
02EC D002       391            pop AR2
02EE 208018     392            jb BUTTON0, minute_set
02F1 3080FD     393            jnb BUTTON0, $
02F4 E4         394            clr a
02F5 E535       395            mov a, Hour
02F7 2401       396            add a, #0x01
02F9 D4         397            da a
02FA B41307     398            cjne a, #0x13, Reset_Hour 
02FD 7401       399            mov a, #0x01
02FF F535       400            mov Hour, a
0301 E4         401            clr a
0302 8005       402            sjmp minute_set
0304            403   Reset_Hour:
0304 F535       404            mov Hour, a
0306 E4         405            clr a
0307 8000       406            sjmp minute_set
0309            407            
0309            408   minute_set:
0309 208424     409            jb BUTTON4, second_set
030C C002       410            push AR2
030E 7A32       410            mov R2, #50
0310 120039     410            lcall ?Wait_Milli_Seconds
0313 D002       410            pop AR2
0315 208418     411            jb BUTTON4, second_set
0318 3084FD     412            jnb BUTTON4, $
031B E4         413            clr a
031C E538       414            mov a, Minute
031E 2401       415            add a, #0x01
0320 D4         416            da a
0321 B46007     417            cjne a, #0x60, Reset_Min 
0324 7400       418            mov a, #0x00
0326 F538       419            mov Minute, a
0328 E4         420            clr a
0329 8005       421            sjmp second_set
032B            422   Reset_Min:
032B F538       423            mov Minute, a
032D E4         424            clr a
032E 8000       425            sjmp second_set
0330            426            
0330            427   second_set:
0330 208624     428            jb BUTTON6, AM_PM_set
0333 C002       429            push AR2
0335 7A32       429            mov R2, #50
0337 120039     429            lcall ?Wait_Milli_Seconds
033A D002       429            pop AR2
033C 208618     430            jb BUTTON6, AM_PM_set
033F 3086FD     431            jnb BUTTON6, $
0342 E4         432            clr a
0343 E532       433            mov a, BCD_counter
0345 2401       434            add a, #0x01
0347 D4         435            da a
0348 B46007     436            cjne a, #0x60, Reset_Sec ; Checks if 60 seconds has passed 
034B 7400       437            mov a, #0x00
034D F532       438            mov BCD_counter, a
034F E4         439            clr a
0350 8005       440            sjmp AM_PM_set
0352            441   Reset_Sec:
0352 F532       442            mov BCD_counter, a
0354 E4         443            clr a
0355 8000       444            sjmp AM_PM_set
0357            445   
0357            446   AM_PM_set:
0357 208113     447            jb BUTTON1, Day_set
035A C002       448            push AR2
035C 7A32       448            mov R2, #50
035E 120039     448            lcall ?Wait_Milli_Seconds
0361 D002       448            pop AR2
0363 208107     449            jb BUTTON1, Day_set
0366 3081FD     450            jnb BUTTON1, $
0369 B201       451            cpl AM_Flag
036B 8000       452            sjmp Day_Set
036D            453            
036D            454   Day_set:
036D 208220     455            jb BUTTON2, offset5
0370 C002       456            push AR2
0372 7A32       456            mov R2, #50
0374 120039     456            lcall ?Wait_Milli_Seconds
0377 D002       456            pop AR2
0379 208214     457            jb BUTTON2, offset5
037C 3082FD     458            jnb BUTTON2, $
037F E4         459            clr a
0380 E53F       460            mov a, Day
0382 2401       461            add a, #0x01
0384 D4         462            da a
0385 B4080C     463            cjne a, #0x8, Reset_Day ; Checks if 60 seconds has passed 
0388 7401       464            mov a, #0x01
038A F53F       465            mov Day, a
038C E4         466            clr a
038D 02050B     467            ljmp loop_b
0390            468   offset5:
0390 E4         469            clr a
0391 02050B     470            ljmp loop_b
0394            471   Reset_Day:
0394 F53F       472            mov Day, a
0396 E4         473            clr a
0397 02050B     474            ljmp loop_b
039A            475            
039A            476   Mode2_hour_set:  
039A 208024     477            jb BUTTON0, Mode2_minute_set
039D C002       478            push AR2
039F 7A32       478            mov R2, #50
03A1 120039     478            lcall ?Wait_Milli_Seconds
03A4 D002       478            pop AR2
03A6 208018     479            jb BUTTON0, Mode2_minute_set
03A9 3080FD     480            jnb BUTTON0, $
03AC E4         481            clr a
03AD E536       482            mov a, Hour2
03AF 2401       483            add a, #0x01
03B1 D4         484            da a
03B2 B41307     485            cjne a, #0x13, Mode2_Reset_Hour 
03B5 7401       486            mov a, #0x01
03B7 F536       487            mov Hour2, a
03B9 E4         488            clr a
03BA 8005       489            sjmp Mode2_minute_set
03BC            490   Mode2_Reset_Hour:
03BC F536       491            mov Hour2, a
03BE E4         492            clr a
03BF 8000       493            sjmp Mode2_minute_set
03C1            494   
03C1            495   Mode2_minute_set:
03C1 208424     496            jb BUTTON4, Mode2_second_set
03C4 C002       497            push AR2
03C6 7A32       497            mov R2, #50
03C8 120039     497            lcall ?Wait_Milli_Seconds
03CB D002       497            pop AR2
03CD 208418     498            jb BUTTON4, Mode2_second_set
03D0 3084FD     499            jnb BUTTON4, $
03D3 E4         500            clr a
03D4 E539       501            mov a, Minute2
03D6 2401       502            add a, #0x01
03D8 D4         503            da a
03D9 B46007     504            cjne a, #0x60, Mode2_Reset_Min 
03DC 7400       505            mov a, #0x00
03DE F539       506            mov Minute2, a
03E0 E4         507            clr a
03E1 8005       508            sjmp Mode2_second_set
03E3            509   Mode2_Reset_Min:
03E3 F539       510            mov Minute2, a
03E5 E4         511            clr a
03E6 8000       512            sjmp Mode2_second_set
03E8            513   
03E8            514   Mode2_second_set:
03E8 208624     515            jb BUTTON6, Mode2_AM_PM_set
03EB C002       516            push AR2
03ED 7A32       516            mov R2, #50
03EF 120039     516            lcall ?Wait_Milli_Seconds
03F2 D002       516            pop AR2
03F4 208618     517            jb BUTTON6, Mode2_AM_PM_set
03F7 3086FD     518            jnb BUTTON6, $
03FA E4         519            clr a
03FB E533       520            mov a, BCD_counter2
03FD 2401       521            add a, #0x01
03FF D4         522            da a
0400 B46007     523            cjne a, #0x60, Mode2_Reset_Sec ; Checks if 60 seconds has passed 
0403 7400       524            mov a, #0x00
0405 F533       525            mov BCD_counter2, a
0407 E4         526            clr a
0408 8005       527            sjmp Mode2_AM_PM_set
040A            528   Mode2_Reset_Sec:
040A F533       529            mov BCD_counter2, a
040C E4         530            clr a
040D 8000       531            sjmp Mode2_AM_PM_set
040F            532   
040F            533   Mode2_AM_PM_set:
040F 208113     534            jb BUTTON1, Mode2_Day_set
0412 C002       535            push AR2
0414 7A32       535            mov R2, #50
0416 120039     535            lcall ?Wait_Milli_Seconds
0419 D002       535            pop AR2
041B 208107     536            jb BUTTON1, Mode2_Day_set
041E 3081FD     537            jnb BUTTON1, $
0421 B202       538            cpl AM_flag2
0423 8000       539            sjmp Mode2_Day_Set
0425            540            
0425            541   Mode2_Day_set:
0425 208220     542            jb BUTTON2, offset6
0428 C002       543            push AR2
042A 7A32       543            mov R2, #50
042C 120039     543            lcall ?Wait_Milli_Seconds
042F D002       543            pop AR2
0431 208214     544            jb BUTTON2, offset6
0434 3082FD     545            jnb BUTTON2, $
0437 E4         546            clr a
0438 E540       547            mov a, Day2
043A 2401       548            add a, #0x01
043C D4         549            da a
043D B4080C     550            cjne a, #0x8, Mode2_Reset_Day ; Checks if 60 seconds has passed 
0440 7401       551            mov a, #0x01
0442 F540       552            mov Day2, a
0444 E4         553            clr a
0445 020688     554            ljmp loop_c
0448            555   offset6:
0448 E4         556            clr a
0449 020688     557            ljmp loop_c
044C            558   Mode2_Reset_Day:
044C F53F       559            mov Day, a
044E E4         560            clr a
044F 020688     561            ljmp loop_c
0452            562   
0452            563   
0452            564   Mode3_hour_set:  
0452 208024     565            jb BUTTON0, Mode3_minute_set
0455 C002       566            push AR2
0457 7A32       566            mov R2, #50
0459 120039     566            lcall ?Wait_Milli_Seconds
045C D002       566            pop AR2
045E 208018     567            jb BUTTON0, Mode3_minute_set
0461 3080FD     568            jnb BUTTON0, $
0464 E4         569            clr a
0465 E537       570            mov a, Hour3
0467 2401       571            add a, #0x01
0469 D4         572            da a
046A B41307     573            cjne a, #0x13, Mode3_Reset_Hour 
046D 7401       574            mov a, #0x01
046F F537       575            mov Hour3, a
0471 E4         576            clr a
0472 8005       577            sjmp Mode3_minute_set
0474            578   Mode3_Reset_Hour:
0474 F537       579            mov Hour3, a
0476 E4         580            clr a
0477 8000       581            sjmp Mode3_minute_set
0479            582   
0479            583   Mode3_minute_set:
0479 208424     584            jb BUTTON4, Mode3_second_set
047C C002       585            push AR2
047E 7A32       585            mov R2, #50
0480 120039     585            lcall ?Wait_Milli_Seconds
0483 D002       585            pop AR2
0485 208418     586            jb BUTTON4, Mode3_second_set
0488 3084FD     587            jnb BUTTON4, $
048B E4         588            clr a
048C E53A       589            mov a, Minute3
048E 2401       590            add a, #0x01
0490 D4         591            da a
0491 B46007     592            cjne a, #0x60, Mode3_Reset_Min 
0494 7400       593            mov a, #0x00
0496 F53A       594            mov Minute3, a
0498 E4         595            clr a
0499 8005       596            sjmp Mode3_second_set
049B            597   Mode3_Reset_Min:
049B F53A       598            mov Minute3, a
049D E4         599            clr a
049E 8000       600            sjmp Mode3_second_set
04A0            601   
04A0            602   Mode3_second_set:
04A0 208625     603            jb BUTTON6, Mode3_AM_PM_set
04A3 C002       604            push AR2
04A5 7A32       604            mov R2, #50
04A7 120039     604            lcall ?Wait_Milli_Seconds
04AA D002       604            pop AR2
04AC 208619     605            jb BUTTON6, Mode3_AM_PM_set
04AF 3086FD     606            jnb BUTTON6, $
04B2 E4         607            clr a
04B3 E534       608            mov a, BCD_counter3
04B5 2401       609            add a, #0x01
04B7 D4         610            da a
04B8 B46008     611            cjne a, #0x60, Mode3_Reset_Sec ; Checks if 60 seconds has passed 
04BB 7400       612            mov a, #0x00
04BD F534       613            mov BCD_counter3, a
04BF E4         614            clr a
04C0 0204C8     615            ljmp Mode3_AM_PM_set
04C3            616   Mode3_Reset_Sec:
04C3 F534       617            mov BCD_counter3, a
04C5 E4         618            clr a
04C6 8000       619            sjmp Mode3_AM_PM_set
04C8            620   
04C8            621   Mode3_AM_PM_set:
04C8 208113     622            jb BUTTON1, Mode3_Day_set
04CB C002       623            push AR2
04CD 7A32       623            mov R2, #50
04CF 120039     623            lcall ?Wait_Milli_Seconds
04D2 D002       623            pop AR2
04D4 208107     624            jb BUTTON1, Mode3_Day_set
04D7 3081FD     625            jnb BUTTON1, $
04DA B203       626            cpl AM_flag3
04DC 8000       627            sjmp Mode3_Day_Set
04DE            628            
04DE            629   Mode3_Day_set:
04DE 208220     630            jb BUTTON2, offset7
04E1 C002       631            push AR2
04E3 7A32       631            mov R2, #50
04E5 120039     631            lcall ?Wait_Milli_Seconds
04E8 D002       631            pop AR2
04EA 208214     632            jb BUTTON2, offset7
04ED 3082FD     633            jnb BUTTON2, $
04F0 E4         634            clr a
04F1 E541       635            mov a, Day3
04F3 2401       636            add a, #0x01
04F5 D4         637            da a
04F6 B4080C     638            cjne a, #0x8, Mode3_Reset_Day ; Checks if 60 seconds has passed 
04F9 7401       639            mov a, #0x01
04FB F541       640            mov Day3, a
04FD E4         641            clr a
04FE 020803     642            ljmp loop_d
0501            643   offset7:
0501 E4         644            clr a
0502 020803     645            ljmp loop_d
0505            646   Mode3_Reset_Day:
0505 F53F       647            mov Day, a
0507 E4         648            clr a
0508 020803     649            ljmp loop_d
050B            650             
050B            651   loop_b:
050B C200       652       clr seconds_flag ; We clear this flag in the main loop, but it is set in the ISR for timer 2
050D C0E0       653            push acc
050F 7401       653            mov a, #1
0511 14         653            dec a
0512 1200BD     653            lcall ?Set_Cursor_2 ; Select column and row
0515 D0E0       653            pop acc
0517 C083       654            push dph
0519 C082       654            push dpl
051B C0E0       654            push acc
051D 9000EB     654            mov dptr, #Clock_Message
0520 1200B2     654            lcall ?Send_Constant_String
0523 D0E0       654            pop acc
0525 D082       654            pop dpl
0527 D083       654            pop dph
0529 C0E0       655            push acc
052B 7407       655            mov a, #7
052D 14         655            dec a
052E 1200BF     655            lcall ?Set_Cursor_1 ; Select column and row
0531 D0E0       655            pop acc
0533 C000       656            push ar0
0535 A832       656            mov r0, BCD_Counter
0537 1200C4     656            lcall ?Display_BCD
053A D000       656            pop ar0
053C C0E0       657            push acc
053E 7404       657            mov a, #4
0540 14         657            dec a
0541 1200BF     657            lcall ?Set_Cursor_1 ; Select column and row
0544 D0E0       657            pop acc
0546 C000       658            push ar0
0548 A838       658            mov r0, Minute
054A 1200C4     658            lcall ?Display_BCD
054D D000       658            pop ar0
054F C0E0       659            push acc
0551 7401       659            mov a, #1
0553 14         659            dec a
0554 1200BF     659            lcall ?Set_Cursor_1 ; Select column and row
0557 D0E0       659            pop acc
0559 C000       660            push ar0
055B A835       660            mov r0, Hour
055D 1200C4     660            lcall ?Display_BCD
0560 D000       660            pop ar0
0562 C0E0       661            push acc
0564 740A       661            mov a, #10
0566 14         661            dec a
0567 1200BF     661            lcall ?Set_Cursor_1 ; Select column and row
056A D0E0       661            pop acc
056C            662            
056C E53F       663            mov a, Day
056E B4011F     664            cjne a, #0x01, Tue_c
0571 C0E0       665            push acc
0573 740E       665            mov a, #14
0575 14         665            dec a
0576 1200BF     665            lcall ?Set_Cursor_1 ; Select column and row
0579 D0E0       665            pop acc
057B C083       666            push dph
057D C082       666            push dpl
057F C0E0       666            push acc
0581 90011F     666            mov dptr, #Monday
0584 1200B2     666            lcall ?Send_Constant_String
0587 D0E0       666            pop acc
0589 D082       666            pop dpl
058B D083       666            pop dph
058D 020659     667            ljmp day_c
0590            668   Tue_c:
0590 B4021F     669            cjne a, #0x02, Wed_c
0593 C0E0       670            push acc
0595 740E       670            mov a, #14
0597 14         670            dec a
0598 1200BF     670            lcall ?Set_Cursor_1 ; Select column and row
059B D0E0       670            pop acc
059D C083       671            push dph
059F C082       671            push dpl
05A1 C0E0       671            push acc
05A3 900123     671            mov dptr, #Tuesday
05A6 1200B2     671            lcall ?Send_Constant_String
05A9 D0E0       671            pop acc
05AB D082       671            pop dpl
05AD D083       671            pop dph
05AF 020659     672            ljmp day_c
05B2            673   Wed_c:
05B2 B4031F     674            cjne a, #0x03, Thurs_c
05B5 C0E0       675            push acc
05B7 740E       675            mov a, #14
05B9 14         675            dec a
05BA 1200BF     675            lcall ?Set_Cursor_1 ; Select column and row
05BD D0E0       675            pop acc
05BF C083       676            push dph
05C1 C082       676            push dpl
05C3 C0E0       676            push acc
05C5 900127     676            mov dptr, #Wednesday
05C8 1200B2     676            lcall ?Send_Constant_String
05CB D0E0       676            pop acc
05CD D082       676            pop dpl
05CF D083       676            pop dph
05D1 020659     677            ljmp day_c
05D4            678   Thurs_c:
05D4 B4041F     679            cjne a, #0x04, Fri_c
05D7 C0E0       680            push acc
05D9 740E       680            mov a, #14
05DB 14         680            dec a
05DC 1200BF     680            lcall ?Set_Cursor_1 ; Select column and row
05DF D0E0       680            pop acc
05E1 C083       681            push dph
05E3 C082       681            push dpl
05E5 C0E0       681            push acc
05E7 90012B     681            mov dptr, #Thursday
05EA 1200B2     681            lcall ?Send_Constant_String
05ED D0E0       681            pop acc
05EF D082       681            pop dpl
05F1 D083       681            pop dph
05F3 020659     682            ljmp day_c
05F6            683   Fri_c:
05F6 B4051F     684            cjne a, #0x05, Sat_c
05F9 C0E0       685            push acc
05FB 740E       685            mov a, #14
05FD 14         685            dec a
05FE 1200BF     685            lcall ?Set_Cursor_1 ; Select column and row
0601 D0E0       685            pop acc
0603 C083       686            push dph
0605 C082       686            push dpl
0607 C0E0       686            push acc
0609 90012F     686            mov dptr, #Friday
060C 1200B2     686            lcall ?Send_Constant_String
060F D0E0       686            pop acc
0611 D082       686            pop dpl
0613 D083       686            pop dph
0615 020659     687            ljmp day_c
0618            688   Sat_c:
0618 B4061F     689            cjne a, #0x06, Sun_C
061B C0E0       690            push acc
061D 740E       690            mov a, #14
061F 14         690            dec a
0620 1200BF     690            lcall ?Set_Cursor_1 ; Select column and row
0623 D0E0       690            pop acc
0625 C083       691            push dph
0627 C082       691            push dpl
0629 C0E0       691            push acc
062B 900133     691            mov dptr, #Saturday
062E 1200B2     691            lcall ?Send_Constant_String
0631 D0E0       691            pop acc
0633 D082       691            pop dpl
0635 D083       691            pop dph
0637 020659     692            ljmp day_c
063A            693   Sun_c:
063A B4071C     694            cjne a, #0x07, day_c
063D C0E0       695            push acc
063F 740E       695            mov a, #14
0641 14         695            dec a
0642 1200BF     695            lcall ?Set_Cursor_1 ; Select column and row
0645 D0E0       695            pop acc
0647 C083       696            push dph
0649 C082       696            push dpl
064B C0E0       696            push acc
064D 900137     696            mov dptr, #Sunday
0650 1200B2     696            lcall ?Send_Constant_String
0653 D0E0       696            pop acc
0655 D082       696            pop dpl
0657 D083       696            pop dph
0659            697   day_c:
0659 200116     698            jb AM_flag, AM2_Output
065C C0E0       699            push acc
065E 740A       699            mov a, #10
0660 14         699            dec a
0661 1200BF     699            lcall ?Set_Cursor_1 ; Select column and row
0664 D0E0       699            pop acc
0666 C0E0       700            push acc
0668 7450       700            mov a, #'P'
066A 12007E     700            lcall ?WriteData
066D D0E0       700            pop acc
066F 020280     701            ljmp loop
0672            702   AM2_Output:
0672 C0E0       703            push acc
0674 740A       703            mov a, #10
0676 14         703            dec a
0677 1200BF     703            lcall ?Set_Cursor_1 ; Select column and row
067A D0E0       703            pop acc
067C C0E0       704            push acc
067E 7441       704            mov a, #'A'
0680 12007E     704            lcall ?WriteData
0683 D0E0       704            pop acc
0685 020280     705       ljmp loop
0688            706   
0688            707   loop_c:
0688 C0E0       708            push acc
068A 7401       708            mov a, #1
068C 14         708            dec a
068D 1200BD     708            lcall ?Set_Cursor_2 ; Select column and row
0690 D0E0       708            pop acc
0692 C083       709            push dph
0694 C082       709            push dpl
0696 C0E0       709            push acc
0698 9000FB     709            mov dptr, #Alarm1_Message
069B 1200B2     709            lcall ?Send_Constant_String
069E D0E0       709            pop acc
06A0 D082       709            pop dpl
06A2 D083       709            pop dph
06A4 C0E0       710            push acc
06A6 7407       710            mov a, #7
06A8 14         710            dec a
06A9 1200BF     710            lcall ?Set_Cursor_1 ; Select column and row
06AC D0E0       710            pop acc
06AE C000       711            push ar0
06B0 A833       711            mov r0, BCD_Counter2
06B2 1200C4     711            lcall ?Display_BCD
06B5 D000       711            pop ar0
06B7 C0E0       712            push acc
06B9 7404       712            mov a, #4
06BB 14         712            dec a
06BC 1200BF     712            lcall ?Set_Cursor_1 ; Select column and row
06BF D0E0       712            pop acc
06C1 C000       713            push ar0
06C3 A839       713            mov r0, Minute2
06C5 1200C4     713            lcall ?Display_BCD
06C8 D000       713            pop ar0
06CA C0E0       714            push acc
06CC 7401       714            mov a, #1
06CE 14         714            dec a
06CF 1200BF     714            lcall ?Set_Cursor_1 ; Select column and row
06D2 D0E0       714            pop acc
06D4 C000       715            push ar0
06D6 A836       715            mov r0, Hour2
06D8 1200C4     715            lcall ?Display_BCD
06DB D000       715            pop ar0
06DD C0E0       716            push acc
06DF 740A       716            mov a, #10
06E1 14         716            dec a
06E2 1200BF     716            lcall ?Set_Cursor_1 ; Select column and row
06E5 D0E0       716            pop acc
06E7            717            
06E7 E540       718            mov a, Day2
06E9 B4011F     719            cjne a, #0x01, Tue_c2
06EC C0E0       720            push acc
06EE 740E       720            mov a, #14
06F0 14         720            dec a
06F1 1200BF     720            lcall ?Set_Cursor_1 ; Select column and row
06F4 D0E0       720            pop acc
06F6 C083       721            push dph
06F8 C082       721            push dpl
06FA C0E0       721            push acc
06FC 90011F     721            mov dptr, #Monday
06FF 1200B2     721            lcall ?Send_Constant_String
0702 D0E0       721            pop acc
0704 D082       721            pop dpl
0706 D083       721            pop dph
0708 0207D4     722            ljmp day_c2
070B            723   Tue_c2:
070B B4021F     724            cjne a, #0x02, Wed_c2
070E C0E0       725            push acc
0710 740E       725            mov a, #14
0712 14         725            dec a
0713 1200BF     725            lcall ?Set_Cursor_1 ; Select column and row
0716 D0E0       725            pop acc
0718 C083       726            push dph
071A C082       726            push dpl
071C C0E0       726            push acc
071E 900123     726            mov dptr, #Tuesday
0721 1200B2     726            lcall ?Send_Constant_String
0724 D0E0       726            pop acc
0726 D082       726            pop dpl
0728 D083       726            pop dph
072A 0207D4     727            ljmp day_c2
072D            728   Wed_c2:
072D B4031F     729            cjne a, #0x03, Thurs_c2
0730 C0E0       730            push acc
0732 740E       730            mov a, #14
0734 14         730            dec a
0735 1200BF     730            lcall ?Set_Cursor_1 ; Select column and row
0738 D0E0       730            pop acc
073A C083       731            push dph
073C C082       731            push dpl
073E C0E0       731            push acc
0740 900127     731            mov dptr, #Wednesday
0743 1200B2     731            lcall ?Send_Constant_String
0746 D0E0       731            pop acc
0748 D082       731            pop dpl
074A D083       731            pop dph
074C 0207D4     732            ljmp day_c2
074F            733   Thurs_c2:
074F B4041F     734            cjne a, #0x04, Fri_c2
0752 C0E0       735            push acc
0754 740E       735            mov a, #14
0756 14         735            dec a
0757 1200BF     735            lcall ?Set_Cursor_1 ; Select column and row
075A D0E0       735            pop acc
075C C083       736            push dph
075E C082       736            push dpl
0760 C0E0       736            push acc
0762 90012B     736            mov dptr, #Thursday
0765 1200B2     736            lcall ?Send_Constant_String
0768 D0E0       736            pop acc
076A D082       736            pop dpl
076C D083       736            pop dph
076E 0207D4     737            ljmp day_c2
0771            738   Fri_c2:
0771 B4051F     739            cjne a, #0x05, Sat_c2
0774 C0E0       740            push acc
0776 740E       740            mov a, #14
0778 14         740            dec a
0779 1200BF     740            lcall ?Set_Cursor_1 ; Select column and row
077C D0E0       740            pop acc
077E C083       741            push dph
0780 C082       741            push dpl
0782 C0E0       741            push acc
0784 90012F     741            mov dptr, #Friday
0787 1200B2     741            lcall ?Send_Constant_String
078A D0E0       741            pop acc
078C D082       741            pop dpl
078E D083       741            pop dph
0790 0207D4     742            ljmp day_c2
0793            743   Sat_c2:
0793 B4061F     744            cjne a, #0x06, Sun_c2
0796 C0E0       745            push acc
0798 740E       745            mov a, #14
079A 14         745            dec a
079B 1200BF     745            lcall ?Set_Cursor_1 ; Select column and row
079E D0E0       745            pop acc
07A0 C083       746            push dph
07A2 C082       746            push dpl
07A4 C0E0       746            push acc
07A6 900133     746            mov dptr, #Saturday
07A9 1200B2     746            lcall ?Send_Constant_String
07AC D0E0       746            pop acc
07AE D082       746            pop dpl
07B0 D083       746            pop dph
07B2 0207D4     747            ljmp day_c2
07B5            748   Sun_c2:
07B5 B4071C     749            cjne a, #0x07, day_c2
07B8 C0E0       750            push acc
07BA 740E       750            mov a, #14
07BC 14         750            dec a
07BD 1200BF     750            lcall ?Set_Cursor_1 ; Select column and row
07C0 D0E0       750            pop acc
07C2 C083       751            push dph
07C4 C082       751            push dpl
07C6 C0E0       751            push acc
07C8 900137     751            mov dptr, #Sunday
07CB 1200B2     751            lcall ?Send_Constant_String
07CE D0E0       751            pop acc
07D0 D082       751            pop dpl
07D2 D083       751            pop dph
07D4            752   day_c2:
07D4 200216     753            jb AM_flag2, AM2_Output2
07D7 C0E0       754            push acc
07D9 740A       754            mov a, #10
07DB 14         754            dec a
07DC 1200BF     754            lcall ?Set_Cursor_1 ; Select column and row
07DF D0E0       754            pop acc
07E1 C0E0       755            push acc
07E3 7450       755            mov a, #'P'
07E5 12007E     755            lcall ?WriteData
07E8 D0E0       755            pop acc
07EA 020280     756            ljmp loop
07ED            757   AM2_Output2:
07ED C0E0       758            push acc
07EF 740A       758            mov a, #10
07F1 14         758            dec a
07F2 1200BF     758            lcall ?Set_Cursor_1 ; Select column and row
07F5 D0E0       758            pop acc
07F7 C0E0       759            push acc
07F9 7441       759            mov a, #'A'
07FB 12007E     759            lcall ?WriteData
07FE D0E0       759            pop acc
0800 020280     760       ljmp loop
0803            761       
0803            762   loop_d:
0803 C0E0       763            push acc
0805 7401       763            mov a, #1
0807 14         763            dec a
0808 1200BD     763            lcall ?Set_Cursor_2 ; Select column and row
080B D0E0       763            pop acc
080D C083       764            push dph
080F C082       764            push dpl
0811 C0E0       764            push acc
0813 90010D     764            mov dptr, #Alarm2_Message
0816 1200B2     764            lcall ?Send_Constant_String
0819 D0E0       764            pop acc
081B D082       764            pop dpl
081D D083       764            pop dph
081F C0E0       765            push acc
0821 7407       765            mov a, #7
0823 14         765            dec a
0824 1200BF     765            lcall ?Set_Cursor_1 ; Select column and row
0827 D0E0       765            pop acc
0829 C000       766            push ar0
082B A834       766            mov r0, BCD_Counter3
082D 1200C4     766            lcall ?Display_BCD
0830 D000       766            pop ar0
0832 C0E0       767            push acc
0834 7404       767            mov a, #4
0836 14         767            dec a
0837 1200BF     767            lcall ?Set_Cursor_1 ; Select column and row
083A D0E0       767            pop acc
083C C000       768            push ar0
083E A83A       768            mov r0, Minute3
0840 1200C4     768            lcall ?Display_BCD
0843 D000       768            pop ar0
0845 C0E0       769            push acc
0847 7401       769            mov a, #1
0849 14         769            dec a
084A 1200BF     769            lcall ?Set_Cursor_1 ; Select column and row
084D D0E0       769            pop acc
084F C000       770            push ar0
0851 A837       770            mov r0, Hour3
0853 1200C4     770            lcall ?Display_BCD
0856 D000       770            pop ar0
0858 C0E0       771            push acc
085A 740A       771            mov a, #10
085C 14         771            dec a
085D 1200BF     771            lcall ?Set_Cursor_1 ; Select column and row
0860 D0E0       771            pop acc
0862            772            
0862 E541       773            mov a, Day3
0864 B4011F     774            cjne a, #0x01, Tue_c3
0867 C0E0       775            push acc
0869 740E       775            mov a, #14
086B 14         775            dec a
086C 1200BF     775            lcall ?Set_Cursor_1 ; Select column and row
086F D0E0       775            pop acc
0871 C083       776            push dph
0873 C082       776            push dpl
0875 C0E0       776            push acc
0877 90011F     776            mov dptr, #Monday
087A 1200B2     776            lcall ?Send_Constant_String
087D D0E0       776            pop acc
087F D082       776            pop dpl
0881 D083       776            pop dph
0883 02094F     777            ljmp day_c3
0886            778   Tue_c3:
0886 B4021F     779            cjne a, #0x02, Wed_c3
0889 C0E0       780            push acc
088B 740E       780            mov a, #14
088D 14         780            dec a
088E 1200BF     780            lcall ?Set_Cursor_1 ; Select column and row
0891 D0E0       780            pop acc
0893 C083       781            push dph
0895 C082       781            push dpl
0897 C0E0       781            push acc
0899 900123     781            mov dptr, #Tuesday
089C 1200B2     781            lcall ?Send_Constant_String
089F D0E0       781            pop acc
08A1 D082       781            pop dpl
08A3 D083       781            pop dph
08A5 02094F     782            ljmp day_c3
08A8            783   Wed_c3:
08A8 B4031F     784            cjne a, #0x03, Thurs_c3
08AB C0E0       785            push acc
08AD 740E       785            mov a, #14
08AF 14         785            dec a
08B0 1200BF     785            lcall ?Set_Cursor_1 ; Select column and row
08B3 D0E0       785            pop acc
08B5 C083       786            push dph
08B7 C082       786            push dpl
08B9 C0E0       786            push acc
08BB 900127     786            mov dptr, #Wednesday
08BE 1200B2     786            lcall ?Send_Constant_String
08C1 D0E0       786            pop acc
08C3 D082       786            pop dpl
08C5 D083       786            pop dph
08C7 02094F     787            ljmp day_c3
08CA            788   Thurs_c3:
08CA B4041F     789            cjne a, #0x04, Fri_c3
08CD C0E0       790            push acc
08CF 740E       790            mov a, #14
08D1 14         790            dec a
08D2 1200BF     790            lcall ?Set_Cursor_1 ; Select column and row
08D5 D0E0       790            pop acc
08D7 C083       791            push dph
08D9 C082       791            push dpl
08DB C0E0       791            push acc
08DD 90012B     791            mov dptr, #Thursday
08E0 1200B2     791            lcall ?Send_Constant_String
08E3 D0E0       791            pop acc
08E5 D082       791            pop dpl
08E7 D083       791            pop dph
08E9 02094F     792            ljmp day_c3
08EC            793   Fri_c3:
08EC B4051F     794            cjne a, #0x05, Sat_c3
08EF C0E0       795            push acc
08F1 740E       795            mov a, #14
08F3 14         795            dec a
08F4 1200BF     795            lcall ?Set_Cursor_1 ; Select column and row
08F7 D0E0       795            pop acc
08F9 C083       796            push dph
08FB C082       796            push dpl
08FD C0E0       796            push acc
08FF 90012F     796            mov dptr, #Friday
0902 1200B2     796            lcall ?Send_Constant_String
0905 D0E0       796            pop acc
0907 D082       796            pop dpl
0909 D083       796            pop dph
090B 02094F     797            ljmp day_c3
090E            798   Sat_c3:
090E B4061F     799            cjne a, #0x06, Sun_c3
0911 C0E0       800            push acc
0913 740E       800            mov a, #14
0915 14         800            dec a
0916 1200BF     800            lcall ?Set_Cursor_1 ; Select column and row
0919 D0E0       800            pop acc
091B C083       801            push dph
091D C082       801            push dpl
091F C0E0       801            push acc
0921 900133     801            mov dptr, #Saturday
0924 1200B2     801            lcall ?Send_Constant_String
0927 D0E0       801            pop acc
0929 D082       801            pop dpl
092B D083       801            pop dph
092D 02094F     802            ljmp day_c3
0930            803   Sun_c3:
0930 B4071C     804            cjne a, #0x07, day_c3
0933 C0E0       805            push acc
0935 740E       805            mov a, #14
0937 14         805            dec a
0938 1200BF     805            lcall ?Set_Cursor_1 ; Select column and row
093B D0E0       805            pop acc
093D C083       806            push dph
093F C082       806            push dpl
0941 C0E0       806            push acc
0943 900137     806            mov dptr, #Sunday
0946 1200B2     806            lcall ?Send_Constant_String
0949 D0E0       806            pop acc
094B D082       806            pop dpl
094D D083       806            pop dph
094F            807   day_c3:
094F 200216     808            jb AM_flag2, AM2_Output3
0952 C0E0       809            push acc
0954 740A       809            mov a, #10
0956 14         809            dec a
0957 1200BF     809            lcall ?Set_Cursor_1 ; Select column and row
095A D0E0       809            pop acc
095C C0E0       810            push acc
095E 7450       810            mov a, #'P'
0960 12007E     810            lcall ?WriteData
0963 D0E0       810            pop acc
0965 020280     811            ljmp loop
0968            812   AM2_Output3:
0968 C0E0       813            push acc
096A 740A       813            mov a, #10
096C 14         813            dec a
096D 1200BF     813            lcall ?Set_Cursor_1 ; Select column and row
0970 D0E0       813            pop acc
0972 C0E0       814            push acc
0974 7441       814            mov a, #'A'
0976 12007E     814            lcall ?WriteData
0979 D0E0       814            pop acc
097B 020280     815       ljmp loop
097E            816   END
